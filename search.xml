<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Frist-Blog</title>
    <url>/2021/10/11/Frist-Blog/</url>
    <content><![CDATA[<p>Test–Blog</p>
<span id="more"></span>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>2021.10.10每日总结</title>
    <url>/2021/10/11/2021-10-10%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>##概述</p>
<ul>
<li>利用HEXO构建网站以及发布到GitHub</li>
<li>LeetCode周赛</li>
<li>Plan<br>&nbsp;</li>
</ul>
<span id="more"></span>

<p>##利用HEXO构建网站以及发布到GitHub</p>
<ol>
<li>下载Git和node.js<br>&nbsp;</li>
<li>npm install hexo -g 安装hexo<br>PS:npm的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。<br>&nbsp;</li>
<li>安装hexo依赖<br>命令：npm install –save hexo-deployer-git<br>&nbsp;</li>
<li>接下来就是github里的SSH配置等就略过了<br>&nbsp;</li>
<li>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本</li>
</ol>
<p>&nbsp;</p>
<p>##LeetCode周赛</p>
<ol>
<li>至少在两个数组中出现的值</li>
</ol>
<p>给你三个整数数组 nums1、nums2 和 nums3 ，请你构造并返回一个 不同 数组，且由 至少 在 两个 数组中出现的所有值组成。数组中的元素可以按 任意 顺序排列。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]</span><br><span class="line">输出：[3,2]</span><br><span class="line">解释：至少在两个数组中出现的所有值为：</span><br><span class="line">- 3 ，在全部三个数组中都出现过。</span><br><span class="line">- 2 ，在数组 nums1 和 nums2 中出现过。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这道题比较简单，用三个集合set分别去存储nums123的值，再用无序表去存所有元素，这个步骤达到去重的效果<br>再遍历判断无序表中的元素在三个set中出现的次数，超过2次就是提取</p>
<p>&nbsp;</p>
<ol start="2">
<li>获取单值网格的最小操作数</li>
</ol>
<p>给你一个大小为 m x n 的二维整数网格 grid 和一个整数 x 。每一次操作，你可以对 grid 中的任一元素 加 x 或 减 x 。</p>
<p>单值网格 是全部元素都相等的网格。</p>
<p>返回使网格化为单值网格所需的 最小 操作数。如果不能，返回 -1 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：grid = [[2,4],[6,8]], x = 2</span><br><span class="line">输出：4</span><br><span class="line">解释：可以执行下述操作使所有元素都等于 4 ： </span><br><span class="line">- 2 加 x 一次。</span><br><span class="line">- 6 减 x 一次。</span><br><span class="line">- 8 减 x 两次。</span><br><span class="line">共计 4 次操作。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这道题是一道中等题，我一开始将grid二维数组转化成一维数组，排序观察之间的差，以为要利用前缀和啥的，其实敏感一点，<br>可以发现取中间数再去与其他数比较，就可以获得最小操作数。转化压缩+排序+数学直觉（取中间数）</p>
<p>&nbsp;</p>
<ol start="3">
<li>股票价格波动<br>给你一支股票价格的数据流。数据流中每一条记录包含一个 时间戳 和该时间点股票对应的 价格 。</li>
</ol>
<p>不巧的是，由于股票市场内在的波动性，股票价格记录可能不是按时间顺序到来的。某些情况下，有的记录可能是错的。如果两个有相同时间戳的记录出现在数据流中，<br>前一条记录视为错误记录，后出现的记录 更正 前一条错误的记录。</p>
<p>请你设计一个算法，实现：</p>
<pre><code>更新 股票在某一时间戳的股票价格，如果有之前同一时间戳的价格，这一操作将 更正 之前的错误价格。
找到当前记录里 最新股票价格 。最新股票价格 定义为时间戳最晚的股票价格。
找到当前记录里股票的 最高价格 。
找到当前记录里股票的 最低价格 。
</code></pre>
<p>请你实现 StockPrice 类：</p>
<pre><code>StockPrice() 初始化对象，当前无股票价格记录。
void update(int timestamp, int price) 在时间点 timestamp 更新股票价格为 price 。
int current() 返回股票 最新价格 。
int maximum() 返回股票 最高价格 。
int minimum() 返回股票 最低价格 。
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;StockPrice&quot;, &quot;update&quot;, &quot;update&quot;, &quot;current&quot;, &quot;maximum&quot;, &quot;update&quot;, &quot;maximum&quot;, &quot;update&quot;, &quot;minimum&quot;]</span><br><span class="line">[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 5, 10, null, 5, null, 2]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">StockPrice stockPrice = new StockPrice();</span><br><span class="line">stockPrice.update(1, 10); // 时间戳为 [1] ，对应的股票价格为 [10] 。</span><br><span class="line">stockPrice.update(2, 5);  // 时间戳为 [1,2] ，对应的股票价格为 [10,5] 。</span><br><span class="line">stockPrice.current();     // 返回 5 ，最新时间戳为 2 ，对应价格为 5 。</span><br><span class="line">stockPrice.maximum();     // 返回 10 ，最高价格的时间戳为 1 ，价格为 10 。</span><br><span class="line">stockPrice.update(1, 3);  // 之前时间戳为 1 的价格错误，价格更新为 3 。</span><br><span class="line">                          // 时间戳为 [1,2] ，对应股票价格为 [3,5] 。</span><br><span class="line">stockPrice.maximum();     // 返回 5 ，更正后最高价格为 5 。</span><br><span class="line">stockPrice.update(4, 2);  // 时间戳为 [1,2,4] ，对应价格为 [3,5,2] 。</span><br><span class="line">stockPrice.minimum();     // 返回 2 ，最低价格时间戳为 4 ，价格为 2 。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>用无序表存储时间戳以及对应的价格，用有序集合multiset存储价格，时间戳更新时，修改集合里面的价格</p>
<p>&nbsp;</p>
<ol start="4">
<li>将数组分成两个数组并最小化数组和的差</li>
</ol>
<p>给你一个长度为 2n 的整数数组。<br>你需要将 nums 分成 两个 长度为 n 的数组，分别求出两个数组的和，并 最小化 两个数组和之 差的绝对值 。nums 中每个元素都需要放入两个数组之一。</p>
<p>请你返回 最小 的数组和之差。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,9,7,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：最优分组方案是分成 [3,9] 和 [7,3] 。</span><br><span class="line">数组和之差的绝对值为 abs((3 + 9) - (7 + 3)) = 2 。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这道题是一道困难题，没来得及看，以后补充。。。</p>
<p>&nbsp;</p>
<p>##Plan</p>
<ul>
<li><p>我觉得还是得动动手开发C++服务器，所以就定个半个月到一个月的计划，B站学习C++服务器从零搭建<br><a href="https://www.bilibili.com/medialist/detail/ml1089073914?type=1&amp;spm_id_from=333.999.0.0">https://www.bilibili.com/medialist/detail/ml1089073914?type=1&amp;spm_id_from=333.999.0.0</a></p>
</li>
<li><p>虽然秋招结束也失败了，但也要好好复盘总结下，明天复盘这段时间的问题啥的</p>
</li>
<li><p>看看八股文主要是操作系统，多线程以及Linux方面</p>
</li>
<li><p>优化博客</p>
</li>
</ul>
<p>##发现</p>
<ul>
<li>hexo安装教程 <a href="https://www.cnblogs.com/chenlove/p/15058170.html">https://www.cnblogs.com/chenlove/p/15058170.html</a></li>
<li>hexo优化配置博客  <a href="https://tding.top/archives/aad98408.html">https://tding.top/archives/aad98408.html</a></li>
<li>MarkDown写作基础教程  <a href="https://www.jianshu.com/p/q81RER/">https://www.jianshu.com/p/q81RER/</a></li>
</ul>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>日结</tag>
      </tags>
  </entry>
</search>
